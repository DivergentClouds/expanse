// lark is a variant of EBNF used by https://github.com/lark-parser/lark/
//
// this file is for reference purposes only and should not be fed to a parser generator
//
// lower precedence rules are closer to the top of the file

%import common.ESCAPED_STRING -> STRING

WS             : /[ \f\r\n]/+ // tabs are forbidden
%ignore WS

COMMENT: /\s*/ "//" /[^\n]/*
%ignore COMMENT

// value terminals
IDENTIFIER        : /[_A-Za-z][_A-Za-z0-9]*/

BINARY_INT        : /0b[01]+/
OCTAL_INT         : /0o[0-7]+/
DECIMAL_INT       : /[0-9]+/
HEX_INT           : /0x[0-9a-fA-F]+/

INTEGER           : BINARY_INT
                  | OCTAL_INT
                  | DECIMAL_INT
                  | HEX_INT

NEXT_WORD         : "\\"
CURRENT_WORD      : "$"
SECTION_START     : "$$"


// root
start             : statement*


// statements
statement         : LABEL -> label
                  | section
                  | declaration
                  | import
                  | conditional
                  | loop
                  | flow_change
                  | output_expression

LABEL             : IDENTIFIER ":"

section           : IDENTIFIER? "@" expression ":"
 
declaration       : const_decl
                  | var_decl
                  | macro_decl

block             : "{" statement* "}"

ARRAY_TYPE        : "[" (INTEGER | IDENTIFIER)? "]"
macro_params      : ARRAY_TYPE? IDENTIFIER ("," ARRAY_TYPE? IDENTIFIER)*

pub_decl          : "pub" (const_decl | var_decl | macro_decl)

const_decl        : "const" IDENTIFIER "=" expression
var_decl          : "var" IDENTIFIER "=" expression
macro_decl        : "macro" IDENTIFIER "(" macro_params? ")" block

import            : "import" value "as" IDENTIFIER

if                : "if" expression block
elseif            : "elseif" expression block
else              : "else" block
conditional       : if elseif* else?

loop              : "for" (IDENTIFIER "in")? expression block


flow_change       : "return" expression?
                  | "break"
                  | "continue"

output_expression : expression ","


// expressions
expression        : boolean_or

boolean_or        : boolean_and ("or" boolean_and)*

boolean_and       : comparison ("and" comparison)*

comparison        : has (("==" | "!=" | ">" | ">=" | "<" | "<=") has)*
                  | has

has               : bitwise ("has" bitwise)?

bitwise           : bitshift (("&" | "|" | "^") bitshift)*

bitshift          : additive (("<<" | ">>") additive)*

additive          : multiplicative (("+" | "-") multiplicative)*

multiplicative    : unary (( "*" | "/" | "%" ) unary)*

unary             : ("~" | "-" | "not") unary
                  | array_access

array_access      : call ("!" call)?

call              : IDENTIFIER ("." IDENTIFIER)? "(" macro_args? ")"
                  | import_access

import_access     : IDENTIFIER "." IDENTIFIER
                  | value

value             : INTEGER
                  | STRING
                  | IDENTIFIER
                  | NEXT_WORD
                  | CURRENT_WORD
                  | SECTION_START
                  | array_def
                  | "(" expression ")"

array_def         : "[" (array_element ("," array_element)*)? "]"

array_element     : range | expression

range             : expression ".." expression

macro_args        : expression ("," expression)*
